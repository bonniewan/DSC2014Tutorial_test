source("http://wush978.github.io/R/init-swirl.R") 
| 嗨! 我看到你有很多變數儲存在你的 workspace。 為了能夠順利進行，我建議你在開始swirl前清空workspace 。

| 輸入 ls() 檢視你的workspace儲存的變數列表。 然後, 輸入 rm(list=ls()) 以清空你的workspace。

| 當你準備好開始的時候，輸入 swirl()。

google :9911249
| 當你在R提示符時 (>):
  | -- 輸入 skip() 幫助你跳過當前的問題。
| -- 輸入 play() 可以幫助你按自己的意願進行R的測試; swirl 會忽略掉你在這部分做的嘗試...
| -- 直到你輸入 nxt() ，它會幫助你重新得到swirl 的注意。
| -- 輸入 bye() 會使swirl 退出。你的進度將會被儲存。
| -- 輸入 main() 使你返回到 swirl 的主選單。
| -- 輸入 info() 會再次顯示以上的資訊。
#----
  1: 00-Hello-DataScienceAndR
| 課程中，可以輸入`skip()`來看答案並跳過卡住的關卡。
| 若是變數已經受到污染，以至於上述方式無法跳過關卡時，請改為輸入：`swirl()`以接續進行下一關。
| 有時需要重新開啟R，載入swirl套件後，輸入`swirl()`接續下一關。
| 請在console中輸入：`chat()`。此部分必需要輸入與上述一樣的指令才會過關。
| 這個指令能打開聊天室的網頁。註冊github帳戶（<https://github.com/join>）之後，即可在這個聊天室之中求助。
| 上述關卡中輸入的`skip()`與`submit()`皆屬於swirl的指令。接著我們介紹：`play()`。
| 在課程進行中，若同學想要自由摸索嘗試的話，可以輸入`play()`來暫時中止swirl。
| 需要回到課程的話，則是輸入：`nxt()`返回課程。
| 輸入`bye()`則可以離開swirl環境。離開後，只要輸入`swirl()`即可選擇接關，繼續挑戰
| 離開前的進度。
2: 01-RBasic-01-Introduction
| 這份文件的格式採用的語法和Markdown相容。
| 先說明一些常見的Markdown語法，以幫助同學快速上手。
| 首先，所有的程式碼，都會用``符號包覆。
| 舉例來說，當swirl提示輸入訊息如下：`sessionInfo()`，即代表各位同學要在console輸入的內容如下：sessionInfo()。
| 其次，所有的連結網址，都會用<>符號包覆。舉例來說，當顯示訊息如下:
| <https://www.google.com>， 則代表請同學打開下列網址: https://www.google.com
| 本文內容取自`help.start()`中的An Introduction to R。
help(chol2inv)
?chol2inv
| 通常給R 的指令分成兩種，一個expression，或是一個assignment。
| 舉例來說，`a <- 1`即是一個assignment的動作。 請各位同學在console輸入`a <- 1`
| 在收到`a + 1`這個expression之後，R 會進行計算，查到a 的值 是1 ，再和1
| 做相加，最後會在螢幕上顯示計算結果為2。
| 我們可以把多個expression用`{`和`}`包覆起來，變成一個大的expression。
| 剛剛也跟各位同學介紹過assignment。 在R
| 裡面，這些存放資料的東西都叫做object，如上述例子中的`a`。
| object可以是一個變數、一連串的數字、文字，甚至是函數或更複雜的東西。
| 在R 中，我們可以利用`objects()`或`ls()`來列出所有目前存在的object
| 的名字。請同學輸入`objects()`或`ls()`。
| 我們可以刪除已經存在的物件。舉例來說，如果我們要刪除`a`，
| 就只要輸入：`rm(a)`。請同學根據上述做法試試看。
3: 01-RBasic-02-Data-Structure-Vectors
| R 的object結構是針對資料分析所設計的。所以最簡單 的object，就是一連串的數字。
| 這讓R 和其他的程式語言不同，因為一般的程式語言 最簡單的object會是一個數字。
| 要用R 建立一個內容為10.4, 5.6, 3.1和6.4的向量， 最常用的方式就是輸入：`c(10.4, 5.6,
| 3.1, 6.4)` 請同學依照這樣的語法建立一個這樣的向量，並且把它存為變數x。
> x <- c(10.4, 5.6, 3.1, 6.4)
| 在R 中，`c()`可以接受任意數量的向量參數，並依照順序將它們串接成一個單一向量。
| 舉例來說：`c(x, 1)`會在剛剛我們建立的x 後面再接一個1 。 而`c(x, 2, 3)`則會在x
| 之後接上2 和3 。 請同學依照上述規則，撰寫一個expression，內容是建立一個在x 後面接上x
| 的向量。
>c(x,x)
| 在R 中，大部份的運算都是向量式的。舉例來說，加法`+`在R 中就屬於向量式。
| 請同學輸入：`c(1, 2, 3) + c(2, 4, 6)` 並觀察結果。
| 當相加的兩個向量長度不同時，R
| 會自動重複比較短的向量，補到和較長的向量相同的長度，然後用
| 一樣的方式去做計算。請同學輸入`2 + c(1,2,3)`試試看。
> 2 + c(1,2,3)
[1] 3 4 5
| 向量式運算可以讓我們在處理資料時更加容易。 在R
| 之中，除了加減乘除之外，許多常用的數學算式都是向量式的。例如：`log`、`exp`、`sin`、
| `cos`、`tan`和`sqrt`。
C()
min()
max()
range() 直接傳回輸入向量的範圍（最小,最大）。
sum()
length()
sum(x)/length(x) x 的平均值
var()
sd()
sort()  則會產生一個和x 長度一樣的向量，但向量中的值是由小到大排列。
sqrt(-17) sqrt(-17+0i)| 在數學中，對負數開根號，在實數中是沒有答案的。
20:40
| 在R 中，`:`這個運算子的優先層級很高。 也就是說，如果看到：`2 *
| 1:10`這段expression，會優先處理`1:10`的部分，然後再將結果乘以2。
| 我們來讓同學試試看，請輸入：`2 * 1:10`。
| 跟各位介紹一個更被廣泛運用，產生向量的方式：`seq`。 `seq(1, 10)` 在R
| 中所代表的，其實就是`1:10`。 請試試看輸入`seq(1, 10)`。
>example(seq)   do all example of the function
| 請同學寫一個expression，產生一個從1 開始，間隔為2 ，長度為10的序列。參數請透過
| 名稱來給定。
> seq(from = 1, by = 2, length.out = 10)
| 若是不使用序列，而是想要重複某一個數字，則可以用`rep`。 請同學試試看：`rep(2, times =10)`
> rep(x, times = 2)
> rep(x, each = 2)
| 在R 中，整理資料的時候很常會將`seq`和`rep`的搭配使用。
| 除了數值之外，邏輯值也是很常見的。 類似數值，R 最基礎的object之一，就是邏輯向量。 在R
| 中，我們看到的一個值，其實只是一個長度為1 的向量。
| 邏輯值「真」常用`TRUE`或`T`來代表。「假」則用`FALSE`或`F`代表。
| 第三種在邏輯向量會出現的值，就是NA（Not Available）。
| 在篩選資料時，若是篩選條件較為複雜，需要用到多個條件來組合而成時，就會用到`&`以及`|`。
| 我們可以利用`is.na`來判斷一個向量裡面是否有NA存在。 請同學試試看`is.na(x)`。
| 在R 之中，我們已經看過兩種特別的記號，分別為：NA和NaN。 NA代表的是缺失值，而NaN
| 大多來自於數學運算中沒有定義的行為。 例如：`sqrt(-17)`、`0/0`和`Inf - Inf`。在R
| 中，無限大就是`Inf`。 R 對此類的數學處理是很聰明的。 同學們可以試試看使用R 計算`Inf +
  | 1` 的結果。
| 雖然可以理解NA和NaN的不同，但是`is.na`會將兩者都定義成TRUE。
| 有時候，我們需要處理文字類型的object。這些object通常被用於指定繪圖的標題、或是處理類別形變數，如：國籍、行政區等等。在R
| 之中，這類的資料是透過單引號`'`或雙引號`"`來建立的。而這類的資料也常被人稱為：「字串」。
| 然而，若是輸入的為`"x"`，那R 就會認為這是一個只有一個字元、內容為"x"的字串。
| 這類文字類型的object，在R 中，`\`符號代表字串中的跳脫符號。
| 舉例來說，如果我們要輸入一個包含雙引號的字串，有兩種方法：一種是用
| 單引號`'`來包覆雙引號，另外一種就是在雙引號之前插入`\`。請同學試試看
| 用跳脫符號的方式，輸入一個字串，內容只有一個雙引號。
| 在R 中，`paste`為經常用來做字串處理的函數。 我們可以丟任意個Argument 給`paste`，結果R
| 會把這些argument以字串的形式接成一個字串。 請同學試試看：`paste("a", "b")`
> paste("a","b")
[1] "a b"
> paste(c("x","y"),1:10)
[1] "x 1"  "y 2"  "x 3"  "y 4"  "x 5"  "y 6"  "x 7"  "y 8"  "x 9"  "y 10"
| 結果中會發現，`1:10`被自動轉換成字串了。 這又是一個R 自動判斷形態的例子。
| 同時，也可以注意到`c("X", "Y")`重複了五次，這是因為`paste`也是一個向量化的函數。
| 另一個值得注意到的是`paste`在串接字串時，在字串中間會留下一個預留的空格。
| 如果不希望在字串間出現空格，可以改為使用`paste0`。
| `paste0`和`paste`為幾乎一樣的函數。差別在於`paste0`預設在串接字串時，中間是不會有空格的。
| 同學請試試看：`paste0(c("X", "Y"), 1:10)`
| 最後，我們要介紹一個在整理資料時被廣泛運用的功能：如何在向量中挑選出一部份的資料。
| 第一種方法，使用坐標。 在R 之中，如果我們要挑選序列x中的第一個和第三個位置的值，只要使用即可：`x[c(1,3)]`。 請同學試試看。
| 第二種方法則是利用邏輯向量。 舉例來說，如果要挑選x 之中超過5 的值，即可透過`x[x > 5]`取得。請同學試試看。
| 第三種方法為削去法。 如果我們要挑序列x 中除了第二個數值之外全部的值，則可以使用`x[-2]`。
| 最後一個方法較為特別，在介紹方法之前，我們要先介紹在R 中names的概念。 在R
| 的向量中，可以針對每一個值進行命名。 舉例來說，我們可以透過：`names(x) <- c("a", "b","c", "d")`來幫x 的每個值命名。 
| 所以如果想要選取名稱為`c("b", "d")`的值，就只要輸入：`x[c("b", "d")]`。 
| 上述內容為關於R 資料結構的入門。
| 接下來，只要再學會對於矩陣和data.frame的操作，就可以開始解決實際的問題了！
| 最後請同學試試看用今天所學的方法，整理台電的公開數據。
| 請同學在完成之後存檔，並輸入`submit()`來檢查結果是否符合預期。
| 如果同學在檔案中看到亂碼，請選取Rstudio 左上角的File -> Reopen With Encoding... ->
| 選取：UTF-8
# 社會服務業自民國87至民國91年的年度用電量（度）
year1 <- 87:91
power1 <- c(6097059332, 6425887925, 6982579022, 7323992602.53436, 7954239517) 
# 製造業自民國87至民國91年的年度用電量（度）
power2 <- c(59090445718, 61981666330, 67378329131, 66127460204.6482, 69696372914.6949) 

# 請選出年度(`year1`)中，社會服務業用電量超過`7e9` 的年份。
# （`7e9`是R 的科學符號，代表`7 * 10^9`）

year1.answer1 <- year1[power1>7 * 10^9]

# 接著請計算「社會服務業從民國87年到91年的平均用電量」。
power1.mean <- sum(power1)/length(power1)

# 請計算「社會服務業從民國87年到91年用電量的標準差」。
power1.sd <- sd(power1)

# 在統計中，我們會計算一筆數據的「標準分數」，算法為數據減去平均數後除以標準差。
# 請計算出「社會服務業從民國87年到91年用電量的標準分數」。
power1.z <- (power1-mean(power1))/sd(power1)

# 同樣的道理，請同學算出「製造業自民國87年至民國91年用電量的平均數、標準差和標準分數」。
power2.mean <- mean(power2)
power2.sd <- sd(power2)
power2.z <- (power2-mean(power2))/sd(power2)

# 最後請根據年度，比較同年度中社會服務業用電量以及製造業用電量的十分之一，並列出前者高於後者的年份。

year1.answer2 <- year1[power1>power2*0.1]

4: 01-RBasic-03-Data-Structure-Object
| 在R 中，我們操作的所有變數，都是一種R 物件(Object)。 這一堂課程中，就是要簡介R
| 的物件結構。
| 在所有物件中，最基礎的「原子」物件，就是在上一堂課中介紹的各種向量。
| 其他的物件都是由這些原子物件組合而成。
| 向量物件有兩個很重要的屬性：`mode`和`length`。
| `mode`代表這個向量的值型態，總共有：`logical`、`integer`、`numeric`、`complex`、`character`和`raw`。
| `length`則代表這個向量中值的個數。
> mode(x)
[1] "numeric"
> length(x)
[1] 5
| R 也可以建立一種叫做`list`的向量，這是「R 物件」的向量。 在此向量中，每一個值都是R
| 物件，都具有各自的`mode`、`length`等屬性。我們會在較為複雜的統計模型中，見到這樣的資料型態。
| 舉例來說，在R 中如果要建立一個迴歸模型，會使用：`g <- lm(dist ~ speed, cars)`
| 這樣的程式碼會利用車速當解釋變數、煞車距離當應變數，建立一個迴歸模型。
| 先不管`lm`如何使用，上述的例子主要是希望能讓同學了解`g`這個物件的結構。
| 只要掌握這部分的課程內容，未來就可以輕鬆的探索更多機器學習或統計分析演算法的輸出結果。
| 在上一個章節中提及，可以使用如`g[1:2]`的方式取出`g`的第一個到第二個值。
| 而這樣的輸出結果和`g`會有同樣的`mode`。
| 同學會在R console看到一些數字以及文字出現。
| 在最上面的`$coefficients`，表示`g[1:2]`這個向量的第一個值（同時也是`g`的第一個值），是有名字的。而它的名字是：`"coefficients"`。
| 由於`g[1:2]`的第一個值是一個有名字的numeric 向量，R
| 就把這個向量所有的名字和值一起顯示在console之中。 而這個numeric
| 向量的第一個值是-17.579095，名字是`"(Intercept)"`。第二個值是3.932409，名字則是`"speed"`。
> g$coefficients
(Intercept)       speed 
-17.579095    3.932409 
> names(g$coefficients)
[1] "(Intercept)" "speed" 
| 接著，`$residuals`表示`g[1:2]`的第二個值也是有名字的，而且它的名字是`"residuals"`。
| 由於這個值也是一個有名字的numeric 向量，所以R 就把值和名字同時顯示到console上。
| 所以我們就可以知道，這個numeric 向量的第一個值的名字是`"1"`，值是3.849460。以此類推。
| 然而，整個R Console的結果顯示，`g[1:2]`仍然是一個list，因為R 只有在顯示list的內容
| 才會帶有`$coefficients`和`$residuals`這種標記。如果只是一個numeric 向量，就不會顯示出
| `$coefficients`和`$residuals`。
> g[1:2]
$coefficients
(Intercept)       speed 
-17.579095    3.932409 

$residuals
1          2          3          4          5          6          7          8 
3.849460  11.849460  -5.947766  12.052234   2.119825  -7.812584  -3.744993   4.255007 
9         10         11         12         13         14         15         16 
12.255007  -8.677401   2.322599 -15.609810  -9.609810  -5.609810  -1.609810  -7.542219 
17         18         19         20         21         22         23         24 
0.457781   0.457781  12.457781 -11.474628  -1.474628  22.525372  42.525372 -21.407036 
25         26         27         28         29         30         31         32 
-15.407036  12.592964 -13.339445  -5.339445 -17.271854  -9.271854   0.728146 -11.204263 
33         34         35         36         37         38         39         40 
2.795737  22.795737  30.795737 -21.136672 -11.136672  10.863328 -29.069080 -13.069080 
41         42         43         44         45         46         47         48 
-9.069080  -5.069080   2.930920  -2.933898 -18.866307  -6.798715  15.201285  16.201285 
49         50 
43.201285   4.268876
> list(1, a = 2)
[[1]]
[1] 1

$a
[1] 2
| 在輸出結果的一開始，R 顯示了`[[1]]`，接著顯示一個值為1 的numeric 向量。
| 開頭的`[[1]]`不只說明了這個物件是一個list，也說明接下來顯示的是第一個值的內容。
| 接著，R 顯示了`$a`，以及顯示一個值為2 的numeric 向量。
| 開頭的`$a`因為位置在上述的`[[1]]`之後，所以代表這是這個list物件的第二個值。
| 同時，這個值的名字是`"a"`。

| 若想找出`g`的第一個值的物件本身，而非被包在一個list中，我們需要用到：`g[[1]]`。
> g[[1]]
(Intercept)       speed 
-17.579095    3.932409 
| 請同學查詢`g[[1]]`的型態。
> mode(g[[1]])
[1] "numeric"
| 再針對`g[1]`和`g[[1]]`的差異進行說明一次。 使用`g[1]`時，R
| 取出向量的第一個元素，並且維持list的結構，所以`g[1]`的結果還仍是list。 相反的，使用`g[[1]]`時，R
| 會打破list的結構，再取出向量的第一個元素，所以`g[[1]]`的型態會是存放在list裡面的R 物件的型態。
| 在上述的例子中，因為g 這個list的第一個存放的R
| 物件是numeric向量，所以得到`g[1]`的型態是list，`g[[1]]`的型態則是numeric。
| 一般來說，對R 物件使用`[]`之後，會取得和該物件相同型態的物件。
| 所以`a[1]`的型態會和`a`一樣，而`[[]]`就沒有類似的特性了。
| 經過上述的練習，相信同學可以理解list這個「R 物件的向量」所代表的意義。

| list向量最實用的特性，在於它可以裝不同型態的值。

| 以`g`為範例，雖然大部分值的型態都是numeric，但是也有些型態為call和list的物件。 list向量讓R
| 的開發者能更有彈性的建立較為複雜的模型。 同學在學會list之後，也可以更有能力來了解不同R 套件所建立的模型物件。
> mode(g[[10]])
[1] "call"
| 這裡的`g[[10]]`其實是記載著產生g 的程式碼。在R 裡面，這樣的程式碼是存成call型態的物件。
| 我們現在只要知道這是一種call就可以了。至於call是什麼東西，要等到同學需要開始深入的學習R 的原始碼、運作機制時，

| 才需要弄懂。我們現在只要知道，list可以裝所有R 的物件就可以了。


google 不同型態 R :Day10 R語言的資料集合種類 https://ithelp.ithome.com.tw/articles/10185547

| 另外，我們也可以為list命名。
| 上述例子中，我們除了用`g[[1]]`來取得第一個值之外，也可以用`g[["coefficients"]]`來取得第一個值。
| 因為`g`這個向量是被命名的，而第一個名字就是`"coefficients"`。 請同學試試看。